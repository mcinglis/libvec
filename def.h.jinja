
// Copyright 2015  Malcolm Inglis <http://minglis.id.au>
//
// This file is part of Libvec.
//
// Libvec is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// Libvec is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
// more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Libvec. If not, see <https://gnu.org/licenses/>.


// This file is the result of rendering:
//
//     {{template_path}}
//
// You should make changes to this file by tuning the build process, or (at a
// stretch) modifying the generation script or template file; not by editing
// this file as-is.


#ifndef LIBVEC_DEF_VEC_{{macroname}}_H
#define LIBVEC_DEF_VEC_{{macroname}}_H


#include <libtypes/types.h>

{% for path in sys_headers %}
#include <{{path}}>
{% endfor %}

{% for path in rel_headers %}
#include "{{path}}"
{% endfor %}


typedef struct vec_{{funcname}} {
    {{type}} * e;
    size_t length;
    size_t capacity;
} Vec_{{typename}};


#define VEC_{{macroname}}( ... ) \
    { .e = ( {{type}}[] ){ __VA_ARGS__ }, \
      .length = NELEM( ( {{type}}[] ){ __VA_ARGS__ } ), \
      .capacity = NELEM( ( {{type}}[] ){ __VA_ARGS__ } ) }


#define VEC_{{macroname}}__FOR_EACH( VEC, EL ) \
    for ( {{typename}} * EL = ( VEC ).e; \
          EL != ( VEC ).e + ( VEC ).length; \
          EL++ )


#endif // ifndef LIBVEC_DEF_VEC_{{macroname}}_H

