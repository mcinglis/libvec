
// Copyright 2015  Malcolm Inglis <http://minglis.id.au>
//
// This file is part of Libvec.
//
// Libvec is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// Libvec is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
// more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Libvec. If not, see <https://gnu.org/licenses/>.


// This file is the result of rendering:
//
//     {{template_path}}
//
// You should make changes to this file by tuning the build process, or (at a
// stretch) modifying the generation script or template file; not by editing
// this file as-is.


#ifndef LIBVEC_VEC_{{macroname}}_H
#define LIBVEC_VEC_{{macroname}}_H


#include <libtypes/types.h>
#include <libmacro/nelem.h>
#include <libmaybe/def/maybe_size.h>
#include <libmaybe/def/maybe_{{filename}}.h>
#include <libarray/def/array_{{filename}}.h>

{% for path in sys_headers %}
#include <{{path}}>
{% endfor %}

#include "def/vec_{{filename}}.h"

{% for path in rel_headers %}
#include "{{path}}"
{% endfor %}


bool
vec_{{funcname}}__is_valid(
        Vec_{{typename}} );


Vec_{{typename}}
vec_{{funcname}}__new(
        {{type}} const * elements,
        size_t length,
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__new_view(
        {{type}} * elements,
        size_t length,
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__new_alloc(
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__new_calloc(
        size_t capacity );


#define vec_{{funcname}}__new_els( ... ) \
    vec_{{funcname}}__copy_vec( \
        ( Vec_{{typename}} ) VEC_{{macroname}}( __VA_ARGS__ ) )


Vec_{{typename}}
vec_{{funcname}}__copy_vec(
        Vec_{{typename}} );


Vec_{{typename}}
vec_{{funcname}}__copy_array(
        Array_{{typename}} );


Vec_{{typename}}
vec_{{funcname}}__copyc_vec(
        Vec_{{typename}},
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__copyc_array(
        Array_{{typename}},
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__view_array(
        Array_{{typename}} );


void
vec_{{funcname}}__memcpy_in(
        Vec_{{typename}} to,
        void const * from,
        size_t from_size );


void
vec_{{funcname}}__memcpy_to(
        Vec_{{typename}} from,
        void * to,
        size_t to_size );


void
vec_{{funcname}}__copy_into_vec(
        Vec_{{typename}} from,
        Vec_{{typename}} to );
// Copies `n` elements from `from` to `to`, where `n` is the minimum of the
// lengths of `from` and `to`.


void
vec_{{funcname}}__copy_into_vec_with(
        Vec_{{typename}} from,
        Vec_{{typename}} to,
        void ( * copier )( {{type}} from, {{type}} * to ) );
// Calls `copier` (or byte-wise copy if null) with all the respective elements
// in `from` and `to` up to the minimum length of both vectors.


void
vec_{{funcname}}__copy_into_array(
        Vec_{{typename}} from,
        Array_{{typename}} to );
// Copies `n` elements from `from` to `to`, where `n` is the minimum of the
// lengths of `from` and `to`.


void
vec_{{funcname}}__copy_into_array_with(
        Vec_{{typename}} from,
        Array_{{typename}} to,
        void ( * copier )( {{type}} from, {{type}} * to ) );
// Calls `copier` (or byte-wise copy if null) with all the respective elements
// in `from` and `to` up to the minimum lengths of `from` and `to`.


void
vec_{{funcname}}__into_vec(
        Vec_{{typename}} from,
        Vec_{{typename}} * to );
// Copies all elements from `from` to `to`, expanding the capacity of `to` if
// needed.


void
vec_{{funcname}}__into_vec_with(
        Vec_{{typename}} from,
        Vec_{{typename}} * to,
        void ( * copier )( {{type}} from, {{type}} * to ),
        void ( * freer )( {{type}} * unused_to ) );
// Calls `freer` (if non-null) with all elements in `to` at indices past the
// length of `from`, expands `to` to have at least a capacity of the length of
// `from`, and calls `copier` (or byte-wise copy if null) with all the
// respective elements in `from` and `to`.


void
vec_{{funcname}}__into_array(
        Vec_{{typename}} from,
        Array_{{typename}} * to );
// Reallocates `to` to the length of `from`, and copies all elements from
// `from` to `to`.


void
vec_{{funcname}}__into_array_with(
        Vec_{{typename}} from,
        Array_{{typename}} * to,
        void ( * copier )( {{type}} from, {{type}} * to ),
        void ( * freer )( {{type}} * unused_to ) );
// Calls `freer` (if non-null) with all elements in `to` at indices past the
// length of `from`, reallocates `to` to the length of `from`, and calls
// `copier` (or byte-wise copy if null) with all the respective elements in
// `from` and `to`.


void
vec_{{funcname}}__free(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__realloc(
        Vec_{{typename}} * xs,
        size_t new_capacity );


void
vec_{{funcname}}__grow_capacity(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__grow_capacity_by(
        Vec_{{typename}} * xs,
        size_t to_grow );


void
vec_{{funcname}}__grow_capacity_for(
        Vec_{{typename}} * xs,
        size_t req_space );


void
vec_{{funcname}}__ensure_capacity(
        Vec_{{typename}} * xs,
        size_t min_capacity );


void
vec_{{funcname}}__shrink_capacity(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__shrink_capacity_to(
        Vec_{{typename}} * xs,
        size_t max_capacity );


void
vec_{{funcname}}__shrink_capacity_by(
        Vec_{{typename}} * xs,
        size_t to_shrink );


void
vec_{{funcname}}__free_spare_capacity(
        Vec_{{typename}} * xs );


Vec_{{typename}}
vec_{{funcname}}__id(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__elements(
        Vec_{{typename}} xs );


size_t
vec_{{funcname}}__length(
        Vec_{{typename}} xs );


size_t
vec_{{funcname}}__capacity(
        Vec_{{typename}} xs );


size_t
vec_{{funcname}}__spare_capacity(
        Vec_{{typename}} xs );


size_t
vec_{{funcname}}__size(
        Vec_{{typename}} );


size_t
vec_{{funcname}}__size_length(
        Vec_{{typename}} );


bool
vec_{{funcname}}__is_empty(
        Vec_{{typename}} );


bool
vec_{{funcname}}__isnt_empty(
        Vec_{{typename}} );


bool
vec_{{funcname}}__is_full(
        Vec_{{typename}} );


bool
vec_{{funcname}}__isnt_full(
        Vec_{{typename}} );


bool
vec_{{funcname}}__is_length_1(
        Vec_{{typename}} );


bool
vec_{{funcname}}__same(
        Vec_{{typename}},
        Vec_{{typename}} );


{{type}}
vec_{{funcname}}__get(
        Vec_{{typename}},
        size_t index );


{{type}} *
vec_{{funcname}}__getp(
        Vec_{{typename}},
        size_t index );


Maybe_{{typename}}
vec_{{funcname}}__getm(
        Vec_{{typename}},
        size_t index );


{{type}}
vec_{{funcname}}__set(
        Vec_{{typename}},
        size_t index,
        {{type}} value );


Maybe_{{typename}}
vec_{{funcname}}__setm(
        Vec_{{typename}},
        size_t index,
        {{type}} value );


void
vec_{{funcname}}__set_all(
        Vec_{{typename}},
        {{type}} value );


{{type}}
vec_{{funcname}}__set_first(
        Vec_{{typename}},
        {{type}} value );


{{type}}
vec_{{funcname}}__set_last(
        Vec_{{typename}},
        {{type}} value );


void
vec_{{funcname}}__memset(
        Vec_{{typename}},
        uchar byte );


void
vec_{{funcname}}__memzero(
        Vec_{{typename}} );


void
vec_{{funcname}}__memset_whole(
        Vec_{{typename}},
        uchar byte );


void
vec_{{funcname}}__memzero_whole(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__append(
        Vec_{{typename}} * xs,
        {{type}} y );


{{type}}
vec_{{funcname}}__pop(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__popn(
        Vec_{{typename}} * xs,
        size_t const n );


void
vec_{{funcname}}__empty(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__empty_with(
        Vec_{{typename}} * xs,
        void ( * freer )( {{type}} * x ) );


void
vec_{{funcname}}__extend_array(
        Vec_{{typename}} * xs,
        Array_{{typename}} );


void
vec_{{funcname}}__extend_vec(
        Vec_{{typename}} * xs,
        Vec_{{typename}} );


#define vec_{{funcname}}__extend_els( XS, ... ) \
    vec_{{funcname}}__extend_array( \
        XS, ( Array_{{typename}} ) ARRAY_{{macroname}}( __VA_ARGS__ ) )


{{type}}
vec_{{funcname}}__first(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__firstp(
        Vec_{{typename}} );


Maybe_{{typename}}
vec_{{funcname}}__firstm(
        Vec_{{typename}} );


{{type}}
vec_{{funcname}}__last(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__lastp(
        Vec_{{typename}} );


Maybe_{{typename}}
vec_{{funcname}}__lastm(
        Vec_{{typename}} );


size_t
vec_{{funcname}}__count(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


size_t
vec_{{funcname}}__count_first(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


size_t
vec_{{funcname}}__count_last(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__take(
        Vec_{{typename}},
        size_t n );


Vec_{{typename}}
vec_{{funcname}}__drop(
        Vec_{{typename}},
        size_t n );


Vec_{{typename}}
vec_{{funcname}}__take_end(
        Vec_{{typename}},
        size_t n );


Vec_{{typename}}
vec_{{funcname}}__drop_end(
        Vec_{{typename}},
        size_t n );


Vec_{{typename}}
vec_{{funcname}}__take_while(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__take_end_while(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__drop_while(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__drop_end_while(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__slice(
        Vec_{{typename}},
        size_t start,
        size_t stop );


Vec_{{typename}}
vec_{{funcname}}__slice_s(
        Vec_{{typename}},
        intmax_t start,
        intmax_t stop );


Vec_{{typename}}
vec_{{funcname}}__left_half(
        Vec_{{typename}} );


Vec_{{typename}}
vec_{{funcname}}__right_half(
        Vec_{{typename}} );


Maybe_size
vec_{{funcname}}__find(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_size
vec_{{funcname}}__find_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_size
vec_{{funcname}}__find_last(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_size
vec_{{funcname}}__find_last_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}} *
vec_{{funcname}}__findp(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}} *
vec_{{funcname}}__findp_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}} *
vec_{{funcname}}__findp_last(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}} *
vec_{{funcname}}__findp_last_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_{{typename}}
vec_{{funcname}}__findm(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_{{typename}}
vec_{{funcname}}__findm_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_{{typename}}
vec_{{funcname}}__findm_last(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_{{typename}}
vec_{{funcname}}__findm_last_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


bool
vec_{{funcname}}__any(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


bool
vec_{{funcname}}__all(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


bool
vec_{{funcname}}__only_one(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


bool
vec_{{funcname}}__all_but_one(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}}
vec_{{funcname}}__foldl(
        Vec_{{typename}} xs,
        {{type}} init,
        {{type}} ( * f )( {{type}} acc, {{type}} x ) );


{{type}}
vec_{{funcname}}__foldl1(
        Vec_{{typename}} xs,
        {{type}} ( * f )( {{type}} acc, {{type}} x ) );


{{type}}
vec_{{funcname}}__foldr(
        Vec_{{typename}} xs,
        {{type}} init,
        {{type}} ( * f )( {{type}} x, {{type}} acc ) );


{{type}}
vec_{{funcname}}__foldr1(
        Vec_{{typename}} xs,
        {{type}} ( * f )( {{type}} x, {{type}} acc ) );


{{type}} *
vec_{{funcname}}__pick(
        Vec_{{typename}} xs,
        bool ( * f )( {{type}} * pick, {{type}} x ) );


bool
vec_{{funcname}}__equal_by(
        Vec_{{typename}} xs,
        Vec_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );


bool
vec_{{funcname}}__equal_array_by(
        Vec_{{typename}} xs,
        Array_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );


bool
vec_{{funcname}}__has_prefix_by(
        Vec_{{typename}} xs,
        Vec_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the boolean that `ys` is a prefix of `xs` under the equality
// function of `eq`.


bool
vec_{{funcname}}__has_suffix_by(
        Vec_{{typename}} xs,
        Vec_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the boolean that `ys` is a suffix of `xs` under the equality
// function of `eq`.


bool
vec_{{funcname}}__has_infix_by(
        Vec_{{typename}} xs,
        Vec_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the boolean that `ys` is contained wholly and intact in `xs` under
// the equality function of `eq`.


Maybe_size
vec_{{funcname}}__infix_index_by(
        Vec_{{typename}} xs,
        Vec_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// If `ys` is contained wholly and intact in `xs` under the equality function
// of `eq`, then returns the index at which `ys` begins within `xs`. Otherwise,
// returns nothing.


{{type}} *
vec_{{funcname}}__infix_ptr_by(
        Vec_{{typename}} xs,
        Vec_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// If `ys` is contained wholly and intact in `xs` under the equality function
// of `eq`, then returns the pointer at which `ys` begins within `xs`.
// Otherwise, returns `NULL`.


size_t
vec_{{funcname}}__infix_count_by(
        Vec_{{typename}} xs,
        Vec_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the number of infixed occurences of `ys` in `xs`.


bool
vec_{{funcname}}__elem_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


{{type}} *
vec_{{funcname}}__elem_ptr_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


Maybe_size
vec_{{funcname}}__elem_index_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


size_t
vec_{{funcname}}__elem_count_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


{{type}} *
vec_{{funcname}}__elem_or_append_by(
        Vec_{{typename}} * xs,
        {{type}} y,
        bool ( * eq )( {{ type}} x, {{type}} y ) );


void
vec_{{funcname}}__replacef(
        Vec_{{typename}},
        bool ( * f )( {{type}} x ),
        {{type}} replacement );


Vec_{{typename}}
vec_{{funcname}}__replacedf(
        Vec_{{typename}} xs,
        bool ( * f )( {{type}} x ),
        {{type}} replacement );


void
vec_{{funcname}}__replace_by(
        Vec_{{typename}} xs,
        {{type}} element,
        {{type}} replacement,
        bool ( * eq )( {{type}} x, {{type}} el ) );


Vec_{{typename}}
vec_{{funcname}}__replaced_by(
        Vec_{{typename}} xs,
        {{type}} element,
        {{type}} replacement,
        bool ( * eq )( {{type}} x, {{type}} el ) );


void
vec_{{funcname}}__filter(
        Vec_{{typename}} * xs,
        bool ( * f )( {{type}} ) );


void
vec_{{funcname}}__filter_not(
        Vec_{{typename}} * xs,
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__filtered(
        Vec_{{typename}} xs,
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__filtered_not(
        Vec_{{typename}} xs,
        bool ( * f )( {{type}} ) );


struct vec_{{funcname}}__each__options {
    void ( * f )( {{type}} );
    bool ( * b )( {{type}} );
    void ( * fi )( size_t index, {{type}} );
    bool ( * bi )( size_t index, {{type}} );
    void ( * fv )( void const * v, {{type}} );
    bool ( * bv )( void const * v, {{type}} );
    void ( * fvi )( void const * v, size_t index, {{type}} );
    bool ( * bvi )( void const * v, size_t index, {{type}} );
    bool ( * where )( {{type}} );
    bool ( * where_not )( {{type}} );
    void const * v;
};

bool
vec_{{funcname}}__each_(
        Vec_{{typename}},
        struct vec_{{funcname}}__each__options );

#define vec_{{funcname}}__each( XS, ... ) \
    vec_{{funcname}}__each_( XS, \
        ( struct vec_{{funcname}}__each__options ){ __VA_ARGS__ } )


struct vec_{{funcname}}__eachp__options {
    void ( * f )( {{type}} * );
    bool ( * b )( {{type}} * );
    void ( * fi )( size_t index, {{type}} * );
    bool ( * bi )( size_t index, {{type}} * );
    void ( * fv )( void const * v, {{type}} * );
    bool ( * bv )( void const * v, {{type}} * );
    void ( * fvi )( void const * v, size_t index, {{type}} * );
    bool ( * bvi )( void const * v, size_t index, {{type}} * );
    bool ( * where )( {{type}} );
    bool ( * where_not )( {{type}} );
    void const * v;
};

bool
vec_{{funcname}}__eachp_(
        Vec_{{typename}},
        struct vec_{{funcname}}__eachp__options );

#define vec_{{funcname}}__eachp( XS, ... ) \
    vec_{{funcname}}__eachp_( XS, \
        ( struct vec_{{funcname}}__eachp__options ){ __VA_ARGS__ } )


Array_{{typename}}
array_{{funcname}}__view_vec(
        Vec_{{typename}} );


Array_{{typename}}
array_{{funcname}}__copy_vec(
        Vec_{{typename}} );


Array_{{typename}}
array_{{funcname}}__view_vec_whole(
        Vec_{{typename}} );


Array_{{typename}}
array_{{funcname}}__copy_vec_whole(
        Vec_{{typename}} );



{% macro typeclass_header(name) -%}
///////////////////////////////////
/// TYPECLASS: {{name}}
///////////////////////////////////
{%- endmacro %}

{% macro typeclass(name) -%}
{% if name in typeclasses %}
{{ typeclass_header(name) }}
{{ caller() }}
{% endif %}
{%- endmacro %}


{% call typeclass('EQ') %}


bool
vec_{{funcname}}__equal(
        Vec_{{typename}},
        Vec_{{typename}} );


bool
vec_{{funcname}}__not_equal(
        Vec_{{typename}},
        Vec_{{typename}} );


bool
vec_{{funcname}}__equal_array(
        Vec_{{typename}},
        Array_{{typename}} );


#define vec_{{funcname}}__equal_els( XS, ... ) \
    vec_{{funcname}}__equal( \
        XS, ( Vec_{{typename}} ) VEC_{{macroname}}( __VA_ARGS__ ) )


bool
vec_{{funcname}}__is_prefix(
        Vec_{{typename}},
        Vec_{{typename}} );


bool
vec_{{funcname}}__is_suffix(
        Vec_{{typename}},
        Vec_{{typename}} );


bool
vec_{{funcname}}__is_infix(
        Vec_{{typename}},
        Vec_{{typename}} );


Maybe_size
vec_{{funcname}}__infix_index(
        Vec_{{typename}},
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__infix_ptr(
        Vec_{{typename}},
        Vec_{{typename}} );


size_t
vec_{{funcname}}__infix_count(
        Vec_{{typename}},
        Vec_{{typename}} );


bool
vec_{{funcname}}__elem(
        Vec_{{typename}},
        {{type}} );


{{type}} *
vec_{{funcname}}__elem_ptr(
        Vec_{{typename}},
        {{type}} );


Maybe_size
vec_{{funcname}}__elem_index(
        Vec_{{typename}},
        {{type}} );


size_t
vec_{{funcname}}__elem_count(
        Vec_{{typename}},
        {{type}} );


{{type}} *
vec_{{funcname}}__elem_or_append(
        Vec_{{typename}} * xs,
        {{type}} y );


void
vec_{{funcname}}__replace(
        Vec_{{typename}},
        {{type}} element,
        {{type}} replacement );


Vec_{{typename}}
vec_{{funcname}}__replaced(
        Vec_{{typename}},
        {{type}} element,
        {{type}} replacement );


{% endcall %}


{% call typeclass('NUM') %}


Vec_{{typename}}
vec_{{funcname}}__view_strm(
        {{type}} * strm );
// Returns a constant vec representation of the buffer `strm` terminated by
// `{{funcname}}__zero()`.


Vec_{{typename}}
vec_{{funcname}}__copy_str(
        {{type}} const * str );


Vec_{{typename}}
vec_{{funcname}}__copyc_str(
        {{type}} const * str,
        size_t capacity );


void
vec_{{funcname}}__extend_str(
        Vec_{{typename}} * const xs,
        {{type}} const * ext );


bool
vec_{{funcname}}__last_is_zero(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__append_zero(
        Vec_{{typename}} * );


{{type}} *
vec_{{funcname}}__term_zero(
        Vec_{{typename}} * );


bool
vec_{{funcname}}__pop_zero(
        Vec_{{typename}} * );


{% endcall %}


{% call typeclass('FROM_STR') %}


void
vec_{{funcname}}__arg_parse(
        char const * name,
        char const * value,
        void * vec_ptr );


{% endcall %}


#endif // ifndef LIBVEC_VEC_{{macroname}}_H

