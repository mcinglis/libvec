
// Copyright 2015  Malcolm Inglis <http://minglis.id.au>
//
// This file is part of Libvec.
//
// Libvec is free software: you can redistribute it and/or modify it under
// the terms of the GNU Affero General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// Libvec is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
// more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with Libvec. If not, see <https://gnu.org/licenses/>.


// This file is the result of rendering:
//
//     {{template_path}}
//
// You should make changes to this file by tuning the build process, or (at a
// stretch) modifying the generation script or template file; not by editing
// this file as-is.


#ifndef LIBVEC_VEC_{{macroname}}_H
#define LIBVEC_VEC_{{macroname}}_H


#include <libtypes/types.h>
#include <libmacro/nelem.h>
#include <libmaybe/def/maybe_size.h>
#include <libmaybe/def/maybe_{{filename}}.h>
#include <libarray/def/array_{{filename}}.h>

{% for path in sys_headers %}
#include <{{path}}>
{% endfor %}

#include "def/vec_{{filename}}.h"

{% for path in rel_headers %}
#include "{{path}}"
{% endfor %}




bool
vec_{{funcname}}__is_valid(
        Vec_{{typename}} );


Vec_{{typename}}
vec_{{funcname}}__new(
        {{type}} const * elements,
        size_t length,
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__new_view(
        {{type}} * elements,
        size_t length,
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__new_alloc(
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__new_calloc(
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__new_empty(
        void );


#define vec_{{funcname}}__new_els( ... ) \
    vec_{{funcname}}__copy_vec( \
        ( Vec_{{typename}} ) VEC_{{macroname}}( __VA_ARGS__ ) )


void
vec_{{funcname}}__free(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__realloc(
        Vec_{{typename}} * xs,
        size_t new_capacity );


void
vec_{{funcname}}__realloc_with(
        Vec_{{typename}} * xs,
        size_t new_capacity,
        void ( * freer )( {{type}} * ) );


Vec_{{typename}}
vec_{{funcname}}__view_arraym(
        ArrayM_{{typename}} );


void
vec_{{funcname}}__memcpy_from(
        Vec_{{typename}} to,
        void const * from,
        size_t from_size );


void
vec_{{funcname}}__memcpy_to(
        Vec_{{typename}} from,
        void * to,
        size_t to_size );


Vec_{{typename}}
vec_{{funcname}}__copy_vec(
        Vec_{{typename}} );


Vec_{{typename}}
vec_{{funcname}}__copy_vec_with(
        Vec_{{typename}},
        void ( * copier )( {{type}} * to_el, {{type}} from_el ) );


Vec_{{typename}}
vec_{{funcname}}__copy_arrayc(
        ArrayC_{{typename}} );


Vec_{{typename}}
vec_{{funcname}}__copy_arrayc_with(
        ArrayC_{{typename}},
        void ( * copier )( {{type}} * to_el, {{type}} from_el ) );


Vec_{{typename}}
vec_{{funcname}}__copy_arraym(
        ArrayM_{{typename}} );


Vec_{{typename}}
vec_{{funcname}}__copy_arraym_with(
        ArrayM_{{typename}},
        void ( * copier )( {{type}} * to_el, {{type}} from_el ) );


Vec_{{typename}}
vec_{{funcname}}__copyc_vec(
        Vec_{{typename}},
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__copyc_arrayc(
        ArrayC_{{typename}},
        size_t capacity );


Vec_{{typename}}
vec_{{funcname}}__copyc_arraym(
        ArrayM_{{typename}},
        size_t capacity );


void
vec_{{funcname}}__copy_vec_into(
        Vec_{{typename}} * to,
        Vec_{{typename}} from );


void
vec_{{funcname}}__copy_vec_into_with(
        Vec_{{typename}} * to,
        Vec_{{typename}} from,
        void ( * copier )( {{type}} * to_el, {{type}} from_el ) );


void
vec_{{funcname}}__copy_arrayc_into(
        Vec_{{typename}} * to,
        ArrayC_{{typename}} from );


void
vec_{{funcname}}__copy_arrayc_into_with(
        Vec_{{typename}} * to,
        ArrayC_{{typename}} from,
        void ( * copier )( {{type}} * to_el, {{type}} from_el ) );


void
vec_{{funcname}}__copy_arraym_into(
        Vec_{{typename}} * to,
        ArrayM_{{typename}} from );


void
vec_{{funcname}}__copy_arraym_into_with(
        Vec_{{typename}} * to,
        ArrayM_{{typename}} from,
        void ( * copier )( {{type}} * to_el, {{type}} from_el ) );


void
vec_{{funcname}}__grow_capacity(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__grow_capacity_by(
        Vec_{{typename}} * xs,
        size_t to_grow );


void
vec_{{funcname}}__grow_capacity_for(
        Vec_{{typename}} * xs,
        size_t req_space );


void
vec_{{funcname}}__ensure_capacity(
        Vec_{{typename}} * xs,
        size_t min_capacity );


void
vec_{{funcname}}__shrink_capacity(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__shrink_capacity_to(
        Vec_{{typename}} * xs,
        size_t max_capacity );


void
vec_{{funcname}}__shrink_capacity_by(
        Vec_{{typename}} * xs,
        size_t to_shrink );


void
vec_{{funcname}}__free_spare_capacity(
        Vec_{{typename}} * xs );


Vec_{{typename}}
vec_{{funcname}}__id(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__elements(
        Vec_{{typename}} xs );


size_t
vec_{{funcname}}__length(
        Vec_{{typename}} xs );


size_t
vec_{{funcname}}__capacity(
        Vec_{{typename}} xs );


size_t
vec_{{funcname}}__spare_capacity(
        Vec_{{typename}} xs );


size_t
vec_{{funcname}}__size(
        Vec_{{typename}} );


size_t
vec_{{funcname}}__size_length(
        Vec_{{typename}} );


bool
vec_{{funcname}}__is_empty(
        Vec_{{typename}} );


bool
vec_{{funcname}}__isnt_empty(
        Vec_{{typename}} );


bool
vec_{{funcname}}__is_full(
        Vec_{{typename}} );


bool
vec_{{funcname}}__isnt_full(
        Vec_{{typename}} );


bool
vec_{{funcname}}__is_length_1(
        Vec_{{typename}} );


bool
vec_{{funcname}}__same(
        Vec_{{typename}},
        Vec_{{typename}} );


{{type}}
vec_{{funcname}}__get(
        Vec_{{typename}},
        size_t index );


{{type}} *
vec_{{funcname}}__getp(
        Vec_{{typename}},
        size_t index );


Maybe_{{typename}}
vec_{{funcname}}__getm(
        Vec_{{typename}},
        size_t index );


{{type}}
vec_{{funcname}}__set(
        Vec_{{typename}},
        size_t index,
        {{type}} value );


Maybe_{{typename}}
vec_{{funcname}}__setm(
        Vec_{{typename}},
        size_t index,
        {{type}} value );


void
vec_{{funcname}}__set_all(
        Vec_{{typename}},
        {{type}} value );


{{type}}
vec_{{funcname}}__set_first(
        Vec_{{typename}},
        {{type}} value );


{{type}}
vec_{{funcname}}__set_last(
        Vec_{{typename}},
        {{type}} value );


void
vec_{{funcname}}__memset(
        Vec_{{typename}},
        uchar byte );


void
vec_{{funcname}}__memzero(
        Vec_{{typename}} );


void
vec_{{funcname}}__memset_whole(
        Vec_{{typename}},
        uchar byte );


void
vec_{{funcname}}__memzero_whole(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__append(
        Vec_{{typename}} * xs,
        {{type}} y );


{{type}}
vec_{{funcname}}__pop(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__popn(
        Vec_{{typename}} * xs,
        size_t const n );


void
vec_{{funcname}}__empty(
        Vec_{{typename}} * xs );


void
vec_{{funcname}}__empty_with(
        Vec_{{typename}} * xs,
        void ( * freer )( {{type}} * x ) );


void
vec_{{funcname}}__extend_arrayc(
        Vec_{{typename}} * xs,
        ArrayC_{{typename}} );


void
vec_{{funcname}}__extend_arraym(
        Vec_{{typename}} * xs,
        ArrayM_{{typename}} );


void
vec_{{funcname}}__extend_vec(
        Vec_{{typename}} * xs,
        Vec_{{typename}} );


#define vec_{{funcname}}__extend_els( XS, ... ) \
    vec_{{funcname}}__extend_arrayc( XS, ARRAYC_{{macroname}}( __VA_ARGS__ ) )


{{type}}
vec_{{funcname}}__first(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__firstp(
        Vec_{{typename}} );


Maybe_{{typename}}
vec_{{funcname}}__firstm(
        Vec_{{typename}} );


{{type}}
vec_{{funcname}}__last(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__lastp(
        Vec_{{typename}} );


Maybe_{{typename}}
vec_{{funcname}}__lastm(
        Vec_{{typename}} );


{{type}}
vec_{{funcname}}__end(
        Vec_{{typename}} );


{{type}} *
vec_{{funcname}}__endp(
        Vec_{{typename}} );


Maybe_{{typename}}
vec_{{funcname}}__endm(
        Vec_{{typename}} );


size_t
vec_{{funcname}}__count(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


size_t
vec_{{funcname}}__count_first(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


size_t
vec_{{funcname}}__count_last(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__take(
        Vec_{{typename}},
        size_t n );


Vec_{{typename}}
vec_{{funcname}}__drop(
        Vec_{{typename}},
        size_t n );


Vec_{{typename}}
vec_{{funcname}}__take_end(
        Vec_{{typename}},
        size_t n );


Vec_{{typename}}
vec_{{funcname}}__drop_end(
        Vec_{{typename}},
        size_t n );


Vec_{{typename}}
vec_{{funcname}}__take_while(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__take_end_while(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__drop_while(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__drop_end_while(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__slice(
        Vec_{{typename}},
        size_t start,
        size_t stop );


Vec_{{typename}}
vec_{{funcname}}__slice_s(
        Vec_{{typename}},
        intmax_t start,
        intmax_t stop );


Vec_{{typename}}
vec_{{funcname}}__left_half(
        Vec_{{typename}} );


Vec_{{typename}}
vec_{{funcname}}__right_half(
        Vec_{{typename}} );


Maybe_size
vec_{{funcname}}__find(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_size
vec_{{funcname}}__find_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_size
vec_{{funcname}}__find_last(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_size
vec_{{funcname}}__find_last_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}} *
vec_{{funcname}}__findp(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}} *
vec_{{funcname}}__findp_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}} *
vec_{{funcname}}__findp_last(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}} *
vec_{{funcname}}__findp_last_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_{{typename}}
vec_{{funcname}}__findm(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_{{typename}}
vec_{{funcname}}__findm_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_{{typename}}
vec_{{funcname}}__findm_last(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


Maybe_{{typename}}
vec_{{funcname}}__findm_last_not(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


bool
vec_{{funcname}}__any(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


bool
vec_{{funcname}}__all(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


bool
vec_{{funcname}}__only_one(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


bool
vec_{{funcname}}__all_but_one(
        Vec_{{typename}},
        bool ( * f )( {{type}} ) );


{{type}}
vec_{{funcname}}__foldl(
        Vec_{{typename}} xs,
        {{type}} init,
        {{type}} ( * f )( {{type}} acc, {{type}} x ) );


{{type}}
vec_{{funcname}}__foldl1(
        Vec_{{typename}} xs,
        {{type}} ( * f )( {{type}} acc, {{type}} x ) );


{{type}}
vec_{{funcname}}__foldr(
        Vec_{{typename}} xs,
        {{type}} init,
        {{type}} ( * f )( {{type}} x, {{type}} acc ) );


{{type}}
vec_{{funcname}}__foldr1(
        Vec_{{typename}} xs,
        {{type}} ( * f )( {{type}} x, {{type}} acc ) );


{{type}} *
vec_{{funcname}}__pick(
        Vec_{{typename}} xs,
        bool ( * f )( {{type}} const * pick, {{type}} x ) );


bool
vec_{{funcname}}__equal_by(
        Vec_{{typename}} xs,
        Vec_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );


bool
vec_{{funcname}}__equal_arrayc_by(
        Vec_{{typename}} xs,
        ArrayC_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );


bool
vec_{{funcname}}__has_prefix_by(
        Vec_{{typename}} xs,
        ArrayC_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the boolean that `ys` is a prefix of `xs` under the equality
// function of `eq`.


bool
vec_{{funcname}}__has_suffix_by(
        Vec_{{typename}} xs,
        ArrayC_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the boolean that `ys` is a suffix of `xs` under the equality
// function of `eq`.


bool
vec_{{funcname}}__has_infix_by(
        Vec_{{typename}} xs,
        ArrayC_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the boolean that `ys` is contained wholly and intact in `xs` under
// the equality function of `eq`.


Maybe_size
vec_{{funcname}}__infix_index_by(
        Vec_{{typename}} xs,
        ArrayC_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the first index in `xs` at which `ys` is a prefix under the equality
// function of `eq`. If there's no such index, returns nothing.


Maybe_size
vec_{{funcname}}__last_infix_index_by(
        Vec_{{typename}} xs,
        ArrayC_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the last index in `xs` at which `ys` is a prefix under the equality
// function of `eq`. If there's no such index, returns nothing.


size_t
vec_{{funcname}}__infix_count_by(
        Vec_{{typename}} xs,
        ArrayC_{{typename}} ys,
        bool ( * eq )( {{type}} x, {{type}} y ) );
// Returns the number of infixed occurences of `ys` in `xs`.


bool
vec_{{funcname}}__elem_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


Maybe_size
vec_{{funcname}}__elem_index_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


{{type}} *
vec_{{funcname}}__elem_ptr_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


Maybe_size
vec_{{funcname}}__elem_last_index_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


{{type}} *
vec_{{funcname}}__elem_last_ptr_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


size_t
vec_{{funcname}}__elem_count_by(
        Vec_{{typename}} xs,
        {{type}} y,
        bool ( * eq )( {{type}} x, {{type}} y ) );


{{type}} *
vec_{{funcname}}__elem_or_append_by(
        Vec_{{typename}} * xs,
        {{type}} y,
        bool ( * eq )( {{ type}} x, {{type}} y ) );


void
vec_{{funcname}}__replacef(
        Vec_{{typename}},
        bool ( * f )( {{type}} x ),
        {{type}} replacement );


Vec_{{typename}}
vec_{{funcname}}__replacedf(
        Vec_{{typename}} xs,
        bool ( * f )( {{type}} x ),
        {{type}} replacement );


void
vec_{{funcname}}__replace_by(
        Vec_{{typename}} xs,
        {{type}} element,
        {{type}} replacement,
        bool ( * eq )( {{type}} x, {{type}} el ) );


Vec_{{typename}}
vec_{{funcname}}__replaced_by(
        Vec_{{typename}} xs,
        {{type}} element,
        {{type}} replacement,
        bool ( * eq )( {{type}} x, {{type}} el ) );


void
vec_{{funcname}}__filter(
        Vec_{{typename}} * xs,
        bool ( * f )( {{type}} ) );


void
vec_{{funcname}}__filter_not(
        Vec_{{typename}} * xs,
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__filtered(
        Vec_{{typename}} xs,
        bool ( * f )( {{type}} ) );


Vec_{{typename}}
vec_{{funcname}}__filtered_not(
        Vec_{{typename}} xs,
        bool ( * f )( {{type}} ) );


struct vec_{{funcname}}__each__options {
    void ( * f )( {{type}} );
    bool ( * b )( {{type}} );
    void ( * fi )( size_t index, {{type}} );
    bool ( * bi )( size_t index, {{type}} );
    void ( * fv )( void const * v, {{type}} );
    bool ( * bv )( void const * v, {{type}} );
    void ( * fvi )( void const * v, size_t index, {{type}} );
    bool ( * bvi )( void const * v, size_t index, {{type}} );
    bool ( * where )( {{type}} );
    bool ( * where_not )( {{type}} );
    void const * v;
};

bool
vec_{{funcname}}__each_(
        Vec_{{typename}},
        struct vec_{{funcname}}__each__options );

#define vec_{{funcname}}__each( XS, ... ) \
    vec_{{funcname}}__each_( XS, \
        ( struct vec_{{funcname}}__each__options ){ __VA_ARGS__ } )


struct vec_{{funcname}}__eachp__options {
    void ( * f )( {{type}} * );
    bool ( * b )( {{type}} * );
    void ( * fi )( size_t index, {{type}} * );
    bool ( * bi )( size_t index, {{type}} * );
    void ( * fv )( void const * v, {{type}} * );
    bool ( * bv )( void const * v, {{type}} * );
    void ( * fvi )( void const * v, size_t index, {{type}} * );
    bool ( * bvi )( void const * v, size_t index, {{type}} * );
    bool ( * where )( {{type}} );
    bool ( * where_not )( {{type}} );
    void const * v;
};

bool
vec_{{funcname}}__eachp_(
        Vec_{{typename}},
        struct vec_{{funcname}}__eachp__options );

#define vec_{{funcname}}__eachp( XS, ... ) \
    vec_{{funcname}}__eachp_( XS, \
        ( struct vec_{{funcname}}__eachp__options ){ __VA_ARGS__ } )


ArrayC_{{typename}}
arrayc_{{funcname}}__view_vec(
        Vec_{{typename}} );


ArrayC_{{typename}}
arrayc_{{funcname}}__view_vec_whole(
        Vec_{{typename}} );


ArrayM_{{typename}}
arraym_{{funcname}}__view_vec(
        Vec_{{typename}} );


ArrayM_{{typename}}
arraym_{{funcname}}__view_vec_whole(
        Vec_{{typename}} );


ArrayM_{{typename}}
arraym_{{funcname}}__copy_vec(
        Vec_{{typename}} );


ArrayM_{{typename}}
arraym_{{funcname}}__copy_vec_whole(
        Vec_{{typename}} );




{% if 'EQ' in typeclasses %}


bool
vec_{{funcname}}__equal(
        Vec_{{typename}},
        Vec_{{typename}} );


bool
vec_{{funcname}}__not_equal(
        Vec_{{typename}},
        Vec_{{typename}} );


#define vec_{{funcname}}__equal_els( XS, ... ) \
    vec_{{funcname}}__equal( \
        XS, ( Vec_{{typename}} ) VEC_{{macroname}}( __VA_ARGS__ ) )


bool
vec_{{funcname}}__first_is(
        Vec_{{typename}},
        {{type}} el );


bool
vec_{{funcname}}__last_is(
        Vec_{{typename}},
        {{type}} el );


bool
vec_{{funcname}}__has_prefix(
        Vec_{{typename}},
        ArrayC_{{typename}} prefix );


bool
vec_{{funcname}}__has_suffix(
        Vec_{{typename}},
        ArrayC_{{typename}} suffix );


bool
vec_{{funcname}}__has_infix(
        Vec_{{typename}},
        ArrayC_{{typename}} infix );


Maybe_size
vec_{{funcname}}__infix_index(
        Vec_{{typename}},
        ArrayC_{{typename}} infix );


Maybe_size
vec_{{funcname}}__last_infix_index(
        Vec_{{typename}},
        ArrayC_{{typename}} infix );


size_t
vec_{{funcname}}__infix_count(
        Vec_{{typename}},
        ArrayC_{{typename}} infix );


bool
vec_{{funcname}}__elem(
        Vec_{{typename}},
        {{type}} );


Maybe_size
vec_{{funcname}}__elem_index(
        Vec_{{typename}},
        {{type}} );


{{type}} *
vec_{{funcname}}__elem_ptr(
        Vec_{{typename}},
        {{type}} );


Maybe_size
vec_{{funcname}}__elem_last_index(
        Vec_{{typename}},
        {{type}} );


{{type}} *
vec_{{funcname}}__elem_last_ptr(
        Vec_{{typename}},
        {{type}} );


size_t
vec_{{funcname}}__elem_count(
        Vec_{{typename}},
        {{type}} );


{{type}} *
vec_{{funcname}}__elem_or_append(
        Vec_{{typename}} * xs,
        {{type}} y );


void
vec_{{funcname}}__replace(
        Vec_{{typename}},
        {{type}} element,
        {{type}} replacement );


Vec_{{typename}}
vec_{{funcname}}__replaced(
        Vec_{{typename}},
        {{type}} element,
        {{type}} replacement );


{% endif %} {# EQ #}




{% if 'NULL' in typeclasses %}


Vec_{{typename}}
vec_{{funcname}}__view_buf(
        {{type}} * buf );
// Returns a vector representation of the buffer `buf` terminated by
// `{{funcname}}__null()`, not including that null terminator. If
// `buffer == NULL`, returns an empty vector.


Vec_{{typename}}
vec_{{funcname}}__view_buf0(
        {{type}} * buf );
// Returns a vector representation of the buffer `buf` terminated by
// `{{funcname}}__null()`, including that null terminator. If
// `buffer == NULL`, returns an empty vector.


Vec_{{typename}}
vec_{{funcname}}__copy_buf(
        {{type}} const * buf );
// Returns a vector copy representation of the buffer `buf` terminated by
// `{{funcname}}__null()`, not including that null terminator. If
// `buffer == NULL`, returns an empty vector.


Vec_{{typename}}
vec_{{funcname}}__copy_buf_with(
        {{type}} const * from,
        void ( * copier )( {{type}} * new_el, {{type}} from_el ) );


Vec_{{typename}}
vec_{{funcname}}__copy_buf0(
        {{type}} const * buf );
// Returns a vector copy representation of the buffer `buf` terminated by
// `{{funcname}}__null()`, including that null terminator. If
// `buffer == NULL`, returns an empty vector.


Vec_{{typename}}
vec_{{funcname}}__copy_buf0_with(
        {{type}} const * from,
        void ( * copier )( {{type}} * new_el, {{type}} from_el ) );


Vec_{{typename}}
vec_{{funcname}}__copyc_buf(
        {{type}} const * buf,
        size_t capacity );
// Returns a vector copy representation of the buffer `buf` terminated by
// `{{funcname}}__null()`, not including that null terminator. The new vector
// will have a minimum capacity of `capacity`; more if `buf` is larger. If
// `buffer == NULL`, returns an empty vector.


Vec_{{typename}}
vec_{{funcname}}__copyc_buf0(
        {{type}} const * buf,
        size_t capacity );
// Returns a vector copy representation of the buffer `buf` terminated by
// `{{funcname}}__null()`, including that null terminator. The new vector will
// have a minimum capacity of `capacity`; more if `buf` is larger. If
// `buffer == NULL`, returns an empty vector.


void
vec_{{funcname}}__copy_buf_into(
        Vec_{{typename}} * to,
        {{type}} const * from );


void
vec_{{funcname}}__copy_buf_into_with(
        Vec_{{typename}} * to,
        {{type}} const * from,
        void ( * copier )( {{type}} * to_el, {{type}} from_el ) );


void
vec_{{funcname}}__copy_buf0_into(
        Vec_{{typename}} * to,
        {{type}} const * from );


void
vec_{{funcname}}__copy_buf0_into_with(
        Vec_{{typename}} * to,
        {{type}} const * from,
        void ( * copier )( {{type}} * to_el, {{type}} from_el ) );


void
vec_{{funcname}}__extend_buf(
        Vec_{{typename}} * const xs,
        {{type}} const * buf );
// Extends the vector `xs` with the elements of the null-terminated buffer
// `buf`, not including the null terminator. If `buffer == NULL`, the vector is
// unchanged.


void
vec_{{funcname}}__extend_buf0(
        Vec_{{typename}} * const xs,
        {{type}} const * buf );
// Extends the vector `xs` with the elements of the null-terminated buffer
// `buf`, including the null terminator. If `buffer == NULL`, the vector is
// unchanged.


bool
vec_{{funcname}}__last_is_null(
        Vec_{{typename}} );
// Returns the boolean that the given vector is non-empty and for the last
// element `x`, `{{funcname}}__is_null( x )`.


bool
vec_{{funcname}}__all_null(
        Vec_{{typename}} );
// Equivalent to `vec_{{funcname}}__all( v, {{funcname}}__is_null )`.


{{type}} *
vec_{{funcname}}__append_null(
        Vec_{{typename}} * );
// Equivalent to `vec_{{funcname}}__append( v, {{funcname}}__null() )`.


{{type}} *
vec_{{funcname}}__term_null(
        Vec_{{typename}} * );
// If `!vec_{{funcname}}__last_is_null( *v )`, performs
// `vec_{{funcname}}__append_null()`. Returns the pointer to the last element.


bool
vec_{{funcname}}__pop_null(
        Vec_{{typename}} * );
// If `vec_{{funcname}}__last_is_null( *v )`, performs
// `vec_{{funcname}}__pop()` and returns `true`. Otherwise, returns `false`.


void
vec_{{funcname}}__filter_null(
        Vec_{{typename}} * );
// Equivalent to `vec_{{funcname}}__filter( v, {{funcname}}__is_null )`.


Vec_{{typename}}
vec_{{funcname}}__filtered_null(
        Vec_{{typename}} );
// Equivalent to `vec_{{funcname}}__filtered( v, {{funcname}}__is_null )`.


{% if 'EQ' in typeclasses %}


bool
vec_{{funcname}}__equal_buf(
        Vec_{{typename}} vec,
        {{type}} const * buf );


bool
vec_{{funcname}}__equal_buf0(
        Vec_{{typename}} vec,
        {{type}} const * buf );


{% endif %} {# EQ #}
{% endif %} {# NULL #}




{% if 'CHAR' in typeclasses %}


#include <stdarg.h>


Vec_{{typename}}
vec_{{funcname}}__copy_str(
        char const * str );


Vec_{{typename}}
vec_{{funcname}}__copy_str_with(
        char const * str,
        void ( * copier )( {{type}} * new_el, char c ) );


Vec_{{typename}}
vec_{{funcname}}__copyc_str(
        char const * str,
        size_t capacity );


void
vec_{{funcname}}__copy_str_into(
        Vec_{{typename}} * to,
        char const * from );


void
vec_{{funcname}}__copy_str_into_with(
        Vec_{{typename}} * to,
        char const * from,
        void ( * copier )( {{type}} * to_el, char from_el ) );


void
vec_{{funcname}}__extend_str(
        Vec_{{typename}} * vec,
        char const * str );


void
vec_{{funcname}}__extend_str_with(
        Vec_{{typename}} * vec,
        char const * str,
        void ( * copier )( {{type}} * vec_el, char str_el ) );


Vec_{{typename}}
vec_{{funcname}}__copy_str0(
        char const * str );


Vec_{{typename}}
vec_{{funcname}}__copy_str0_with(
        char const * str,
        void ( * copier )( {{type}} * new_el, char c ) );


Vec_{{typename}}
vec_{{funcname}}__copyc_str0(
        char const * str,
        size_t capacity );


void
vec_{{funcname}}__copy_str0_into(
        Vec_{{typename}} * to,
        char const * from );


void
vec_{{funcname}}__copy_str0_into_with(
        Vec_{{typename}} * to,
        char const * from,
        void ( * copier )( {{type}} * to_el, char from_el ) );


void
vec_{{funcname}}__extend_str0(
        Vec_{{typename}} * vec,
        char const * str );


void
vec_{{funcname}}__extend_str0_with(
        Vec_{{typename}} * vec,
        char const * str,
        void ( * copier )( {{type}} * vec_el, char str_el ) );


Vec_{{typename}}
vec_{{funcname}}__new_fmt(
        char const * format,
        ... )
#ifdef HAVE_ATTRIBUTE_FORMAT
    __attribute__( ( format( printf, 1, 2 ) ) )
#endif
    ;


void
vec_{{funcname}}__fmt_into(
        Vec_{{typename}} *,
        char const * format,
        ... )
#ifdef HAVE_ATTRIBUTE_FORMAT
    __attribute__( ( format( printf, 2, 3 ) ) )
#endif
    ;


void
vec_{{funcname}}__extend_fmt(
        Vec_{{typename}} *,
        char const * format,
        ... )
#ifdef HAVE_ATTRIBUTE_FORMAT
    __attribute__( ( format( printf, 2, 3 ) ) )
#endif
    ;


void
vec_{{funcname}}__extend_fmtv(
        Vec_{{typename}} *,
        char const * format,
        va_list ap );


Vec_{{typename}}
vec_{{funcname}}__new_fmt0(
        char const * format,
        ... )
#ifdef HAVE_ATTRIBUTE_FORMAT
    __attribute__( ( format( printf, 1, 2 ) ) )
#endif
    ;


void
vec_{{funcname}}__fmt0_into(
        Vec_{{typename}} *,
        char const * format,
        ... )
#ifdef HAVE_ATTRIBUTE_FORMAT
    __attribute__( ( format( printf, 2, 3 ) ) )
#endif
    ;


void
vec_{{funcname}}__extend_fmt0(
        Vec_{{typename}} *,
        char const * format,
        ... )
#ifdef HAVE_ATTRIBUTE_FORMAT
    __attribute__( ( format( printf, 2, 3 ) ) )
#endif
    ;


void
vec_{{funcname}}__extend_fmtv0(
        Vec_{{typename}} *,
        char const * format,
        va_list ap );


{% if 'EQ' in typeclasses %}


bool
vec_{{funcname}}__equal_str(
        Vec_{{typename}},
        char const * str );


bool
vec_{{funcname}}__equal_str0(
        Vec_{{typename}},
        char const * str );


{% endif %} {# EQ #}
{% endif %} {# CHAR #}




{% if 'FROM_STR' in typeclasses %}


void
vec_{{funcname}}__argparse(
        char const * name,
        char const * value,
        void * vec_ptr );


{% endif %}




#endif // ifndef LIBVEC_VEC_{{macroname}}_H

